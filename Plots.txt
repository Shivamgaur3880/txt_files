A1)displot(histogram,kdeplot,rugplot):-

sns.displot(data.feature)==Normal
also
sns.displot(data.feature,hist=false)==Without histogram
also
sns.displot(data.feature,hist=false,rug=True)==With rug but without histogram
also
sns.displot(data.feature,hist=false,rug=True,bins=20)==20 bins in chart
also
sns.displot(data.feature,hist=false,rug=True,bins=[1500,2000,3000,4500]==bins range
also
from scipy.stats import norms
sns.displot(data.feature,fit=norms);====> Normal distribution curve over chart
also, use skewnorms

A) hist_kws

	sns.displot(data.feature,kde=False,
			hist_kws = {'alpha': 1});====>dark histogram
also
	sns.displot(data.feature,kde=False,
			hist_kws = {'alpha' :1,'histtype':'step'});====>dark histogram with only step
also
	sns.displot(data.feature,kde=False,
			hist_kws = {'alpha' :1,'histtype':'stepfilled'});====>dark histogram with only stepfilled

B) kde_kws
	
	sns.displot(data.feature,
			kde_kws = {'1w':5});====>kde width
also
	sns.displot(data.feature,
			kde_kws = {'bw':100});====>kde bandwidth(jagger lines)

C) rug_kws
	
	sns.displot(data.feature,rug=True,
			rug_kws = {'height':0.15});====>rug height
also
	sns.displot(data.feaure,rug=True,
			rug_kws = {'height':0.15,'color':'xkcd:navy'});====>rug color

also(change color of full chart)

	sns.displot(data.feature,rug=True,color='r',
			rug_kws = {'height':0.15});====>full chart color

A2)jointplotK(1.relationship b/w two variables 2.as well as individual distribution)

sns.set_style('darkgrid')

sns.jointplot(x=data.feature1,y=data.feature2)

A) PLOT KINDS:- 6(six)
1)scatter(default)
2)kde=	curves
3)reg=	regression
4)hist=	histogram
5)hex=	hexaganol
6)resid

sns.jointplot(x='feature1',y='feature2',data=data,
		kind='scatter'				===>default
		kind='kde'
		kind='reg'
		kind='hist')	===>like heatmap			===>use only 1

B)also add 1 on top of other

	g=sns.jointplot(x='feature1',y='feature2',data=data);
	type(g)
	
	g.plot_joint(sns.kdeplot,color='grey',level=5);

C) On categorical data(hue)

	sns.jointplot(x='feature1',y='feature2',data=data,
			hue='feature3');			====>feature 3 must be categorical data
also
	sns.jointplot(x='feature1',y='feature2',data=data,
			hue='feature3'
			kind='kde');				====>only kde curve

D) Color:-

	sns.jointplot(x='feature1',y='feature2',data=data,
			color='green');

tip:- if use hue(two color present) then use pallate

	sns.jointplot(x='feature1',y='feature2',data=data,
			hue='feature3',
			pallate='autumn');

E) height,space & ratio
	
	sns.jointplot(x='feature1',y='feature2',data=data,
			height=8			====>chart size(8x8)
			space=0.2			====>move marginal distribution(near or away)
			ratio=2				====>increse marginal distribution size

joint_kws:-

	sns.jointplot(x='feature1',y='feature2',data=data,
			joint_kws = {'marker' : 5});

	sns.jointplot(x='feature1',y='feature2',data=data,
			kind='reg',
			joint_kws = {'ci':None,'order':2}); ====>ci(shade),order(polinomial regression)
	
marginal_kws:-

	sns.jointplot(x='feature1',y='feature2',data=data,
			marginal_kws = {'color' :'xkcd:golden'});

	sns.jointplot(x='feature1',y='feature2',data=data,
			kind='kde',
			marginal_kws = {'lw':4,'shade':True}); ====>lw(line width)

A3) pairplot:-(also for correlation)				single plot(for checking))	sns.distplot(data['feature'],
													kde=False,
	sns.set.style('darkgrid')									hist_kws{'alpha':1});

	sns.pairplot(data)
	data.dtypes======>only show value features

1)kinds:- a) scatter(default) b)reg c)histogram(default) d)kde

d)sns.pairplot(data,
		diag_kind='kde')
b)sns.pairplot(data,
		kind='reg')

2) also add 1 on top of other

		g = sns.pairplot(data)
		type(g)
		g.map_upper(sns.kdeplot,
				n_level=6,
				color='xkcd:wine_red');

3)pairplot:-(for categorical variables).
	
	data['newfeature'] = data.feature.isin(['sat','sun'])
	data.head()

	sns.pairplot(data,hue = 'newfeature');
4)plot for specific variable
	sns.pairplot(data,hue = 'newfeature',
			vars=['feature1','feature2']);

5)plot for super specific variable
	sns.pairplot(data,hue = 'newfeature',
			kind='reg',				====>optional
			height=4,				====>optional
			y_vars=['feature1'],
			x_vars=['feature2','feature3]);

6) advance styling: height & aspect
		
	from ipywidgets import interactive
	def size_widget(height=2.5,aspect=1):
		sns.pairplot(data,height=height,
					aspect= aspect)
	interactive(size_widget,height=(1,3.5,0.5),
					aspect=(0.5,2,0.25))
6a) pallets

	sns.pairplot(data,hue='feature',
				pallete='plasma');
6b) plot_kws , drag_kws , grid_kws 

	sns.pairplot(data,drag_kws={'color':'gray',
					'alpha':0.6});

	sns.pairplot(data,plot_kws={'ci':None,
					color='xkcd:salmon',
					'scatter_kws':{'color':'gray'},   =====>another dictionary
							's':3			====>size(optional)
								});
						
				